import streamlit as st
import os
import time
from datetime import datetime
import json
import pandas as pd
import base64
import requests
from Digital_chronical_backend import DigitalChronicler, ChroniclerConfig

# Document format templates
class DocumentFormats:
    @staticmethod
    def generate_html_content(title, content, topic, formatted_date, source, source_url, image_url):
        return f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{title}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #eee;
            padding-bottom: 20px;
        }}
        .header h1 {{
            font-size: 28px;
            margin-bottom: 15px;
            color: #1a1a1a;
        }}
        .metadata {{
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            font-size: 14px;
        }}
        .content {{
            font-size: 16px;
            line-height: 1.8;
            margin: 30px 0;
        }}
    </style>
</head>
<body>
    <div class="header"><h1>{title}</h1></div>
    {f'<img src="{image_url}" alt="Article Image" style="max-width:100%;height:auto;display:block;margin:20px auto;">' if image_url else ''}
    <div class="metadata">
        <p><strong>Topic:</strong> {topic.capitalize()}</p>
        <p><strong>Published:</strong> {formatted_date}</p>
        <p><strong>Source:</strong> {source}</p>
        <p><strong>URL:</strong> <a href="{source_url}">{source_url}</a></p>
    </div>
    <div class="content">{content}</div>
    <footer style="text-align:center;margin-top:40px;color:#666;font-size:14px;">
        Generated by Digital Chronicler on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    </footer>
</body>
</html>"""

    @staticmethod
    def generate_markdown_content(title, content, topic, formatted_date, source, source_url, image_url):
        return f"""# {title}

![Article Image]({image_url})

## Overview
**Topic:** {topic.capitalize()}  
**Published:** {formatted_date}  
**Source:** [{source}]({source_url})

---

{content}

---

### Article Metadata
- **Source URL:** {source_url}
- **Generation Time:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **Generator:** Digital Chronicler
"""

    @staticmethod
    def generate_text_content(title, content, topic, formatted_date, source, source_url):
        return f"""
=================================================================
{title.upper()}
=================================================================

Topic: {topic.capitalize()}
Published: {formatted_date}
Source: {source}
URL: {source_url}

-----------------------------------------------------------------

{content}

-----------------------------------------------------------------

Generated by Digital Chronicler on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
=================================================================
"""

    @staticmethod
    def generate_json_content(title, content, topic, formatted_date, source, source_url, image_url):
        return {
            "title": title,
            "topic": topic,
            "published_date": formatted_date,
            "source": {
                "name": source,
                "url": source_url
            },
            "content": content,
            "image_url": image_url if image_url else None,
            "metadata": {
                "generation_timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                "generator": "Digital Chronicler"
            }
        }

# Set page configuration
st.set_page_config(
    page_title="Digital Chronicler - AI News Generator",
    page_icon="📰",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for blue theme
def apply_custom_css():
    st.markdown("""
    <style>
        /* Main blue theme colors */
        :root {
            --primary-color: #1E88E5;
            --secondary-color: #0D47A1;
            --background-color: #E3F2FD;
            --text-color: #0D2B45;
            --sidebar-color: #1565C0;
        }
        
        /* Main background */
        .stApp {
            background-color: #F5F9FF;
        }
        
        /* Headers */
        h1, h2, h3 {
            color: #0D47A1 !important;
        }
        
        /* Sidebar */
        .css-1d391kg, .css-1e5imcs {
            background-color: #E3F2FD;
        }
        
        /* Buttons */
        .stButton>button {
            background-color: #1E88E5;
            color: white;
            border-radius: 5px;
            border: none;
            padding: 10px 24px;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .stButton>button:hover {
            background-color: #0D47A1;
            color: white;
            border: none;
        }
        
        /* Cards for news display */
        .news-card {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-left: 5px solid #1E88E5;
        }
        
        .card-title {
            color: #0D47A1;
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .card-meta {
            color: #757575;
            font-size: 14px;
            margin-bottom: 15px;
        }
        
        .card-content {
            color: #212121;
            line-height: 1.6;
        }
        
        /* Highlight important elements */
        .highlight {
            background-color: #E3F2FD;
            padding: 5px;
            border-radius: 3px;
        }
        
        /* Progress bar */
        .stProgress .st-bo {
            background-color: #1E88E5;
        }
        
        /* Metrics */
        .metric-container {
            background-color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .metric-value {
            font-size: 24px;
            font-weight: 600;
            color: #1E88E5;
        }
        
        .metric-label {
            font-size: 14px;
            color: #757575;
        }
        
        /* Tabs */
        .stTabs [data-baseweb="tab-list"] {
            gap: 8px;
        }

        .stTabs [data-baseweb="tab"] {
            background-color: #E3F2FD;
            border-radius: 4px 4px 0px 0px;
            padding: 10px 16px;
            color: #1565C0;
        }

        .stTabs [aria-selected="true"] {
            background-color: #1E88E5 !important;
            color: white !important;
        }
        
        /* Colored badges for topics */
        .topic-badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            margin-right: 5px;
        }
        
        .topic-technology {
            background-color: #1E88E5;
            color: white;
        }
        
        .topic-science {
            background-color: #43A047;
            color: white;
        }
        
        .topic-politics {
            background-color: #C62828;
            color: white;
        }
        
        .topic-business {
            background-color: #FFB300;
            color: black;
        }
        
        .topic-health {
            background-color: #26A69A;
            color: white;
        }
        
        .topic-entertainment {
            background-color: #8E24AA;
            color: white;
        }
        
        .topic-sports {
            background-color: #FB8C00;
            color: white;
        }
        
        .topic-general {
            background-color: #757575;
            color: white;
        }
        
        /* App header */
        .app-header {
            background-color: #1565C0;
            color: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .app-title {
            font-size: 28px;
            font-weight: 700;
            margin: 0;
            color: white !important;
        }
        
        .app-subtitle {
            font-size: 16px;
            font-weight: 400;
            margin: 5px 0 0 0;
            color: #E3F2FD;
        }
        /* Direct Input Form Styles */
        .stForm {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        .stForm > div {
            margin-bottom: 15px;
        }
        
        .stTextInput > div > div {
            border-radius: 5px;
        }
        
        .stTextArea > div > div {
            border-radius: 5px;
        }
        
        /* Custom article badge */
        .custom-article-badge {
            background-color: #1E88E5;
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            margin-right: 5px;
        }
    </style>
    """, unsafe_allow_html=True)

# Apply custom CSS
apply_custom_css()

# App header
def display_app_header():
    st.markdown("""
    <div class="app-header">
        <div>
            <h1 class="app-title">📰 Digital Chronicler</h1>
            <p class="app-subtitle">AI-Powered News Generation Platform</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

# Initialize session state variables
if 'chronicler' not in st.session_state:
    config = ChroniclerConfig()
    st.session_state.chronicler = DigitalChronicler()
    st.session_state.generated_articles = []
    st.session_state.researched_stories = []
    st.session_state.generating = False
    st.session_state.last_generated = None
    st.session_state.show_settings = False
    st.session_state.direct_input_article = None  # Add this line

# Display formatted topic badge
def format_topic_badge(topic):
    topic = topic.lower()
    known_topics = ['technology', 'science', 'politics', 'business', 'health', 'entertainment', 'sports', 'general','war', 'education', 'environment']
    if topic not in known_topics:
        topic = 'technology'  # Default to technology if unknown topic
    
    return f'<span class="topic-badge topic-{topic}">{topic.capitalize()}</span>'


def display_direct_input_form():
    st.markdown("### Custom News Generation")
    
    # Create a form for direct input
    with st.form("direct_input_form"):
        title = st.text_input("Article Title", placeholder="Enter a title for your article...")
        
        topic_options = get_topic_options()
        topic = st.selectbox(
            "Article Topic",
            options=[option["value"] for option in topic_options],
            format_func=lambda x: next((option["label"] for option in topic_options if option["value"] == x), x),
            index=0
        )
        
        content = st.text_area(
            "Article Content/Notes", 
            height=200,
            placeholder="Enter content or notes for the AI to base the article on..."
        )
        
        submitted = st.form_submit_button("🎯 Generate Custom Article", use_container_width=True)
        
        if submitted:
            if title and content:
                with st.spinner("Generating custom article..."):
                    try:
                        generated_article = st.session_state.chronicler.process_direct_input(
                            title=title,
                            topic=topic,
                            content=content
                        )
                        
                        if generated_article:
                            # Add to the beginning of generated articles
                            st.session_state.generated_articles.insert(0, generated_article)
                            st.success("✨ Custom article generated successfully!")
                            st.rerun()
                        else:
                            st.error("No relevant news found. Try different content or topic.")
                    except Exception as e:
                        st.error(f"Error generating article: {str(e)}")
            else:
                st.warning("Please enter both title and content.")



def display_news_card(article, index, source_tab="general"):
    """Display a news article card with download options and interactive elements."""
    title = article.get('generated_title', article.get('title', 'Untitled Article'))
    content = article.get('generated_content', '')
    topic = article.get('topic', 'general')
    source = article.get('source_name', 'Unknown Source')
    source_url = article.get('url', '')
    image_url = article.get('image_url', '')
    timestamp = article.get('generation_timestamp', datetime.now().isoformat())
    
    # Format timestamp
    try:
        if isinstance(timestamp, str):
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            formatted_date = dt.strftime("%B %d, %Y at %I:%M %p")
        else:
            formatted_date = "Recently"
    except:
        formatted_date = "Recently"
    
    # Create topic badge
    topic_badge = format_topic_badge(topic)
    
    # Display image if available
    if image_url:
        try:
            st.image(image_url, caption=f"Source: {source}", use_column_width=True)
        except Exception as e:
            st.warning(f"Could not load image from {image_url}")
    
    # Display article card
    preview_content = content[:500] + ("..." if len(content) > 500 else "")
    st.markdown(f"""
    <div class="news-card">
        <div class="card-title">{title}</div>
        <div class="card-meta">
            {topic_badge} | Published {formatted_date} | Source: {source}
        </div>
        <div class="card-content">
            {preview_content}
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Add "Read more" expander (removed key parameter)
    if len(content) > 500:
        with st.expander("Read full article"):
            st.markdown(content)
    
    # Add Export buttons with unique keys
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        regen_key = f"regen_{source_tab}_{index}"
        if st.button(f"🔄 Regenerate #{index+1}", key=regen_key):
            st.session_state.regenerate_index = index
            st.rerun()
    
    with col2:
        # Prepare content for download
        content_without_title = content.split('\n', 1)[1] if '\n' in content else content
        cleaned_content = content_without_title.replace('**', '')
        output_format = st.session_state.chronicler.config.output_format
        timestamp_str = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        if output_format == "text":
            download_content = DocumentFormats.generate_text_content(
                title=title,
                content=cleaned_content,
                topic=topic,
                formatted_date=formatted_date,
                source=source,
                source_url=source_url
            )
            download_filename = f"article_{index}_{timestamp_str}.txt"
            mime_type = "text/plain"
        
        elif output_format == "json":
            download_content = json.dumps(
                DocumentFormats.generate_json_content(
                    title=title,
                    content=cleaned_content,
                    topic=topic,
                    formatted_date=formatted_date,
                    source=source,
                    source_url=source_url,
                    image_url=image_url
                ),
                indent=2
            )
            download_filename = f"article_{index}_{timestamp_str}.json"
            mime_type = "application/json"
        
        elif output_format == "markdown":
            download_content = DocumentFormats.generate_markdown_content(
                title=title,
                content=cleaned_content,
                topic=topic,
                formatted_date=formatted_date,
                source=source,
                source_url=source_url,
                image_url=image_url
            )
            download_filename = f"article_{index}_{timestamp_str}.md"
            mime_type = "text/markdown"
        
        else:  # HTML format
            download_content = DocumentFormats.generate_html_content(
                title=title,
                content=cleaned_content,
                topic=topic,
                formatted_date=formatted_date,
                source=source,
                source_url=source_url,
                image_url=image_url
            )
            download_filename = f"article_{index}_{timestamp_str}.html"
            mime_type = "text/html"
        
        # Create download button with unique key
        download_key = f"download_{source_tab}_{index}"
        st.download_button(
            label="📥 Download",
            data=download_content,
            file_name=download_filename,
            mime=mime_type,
            key=download_key
        )
    
    st.markdown("<hr>", unsafe_allow_html=True)

# Function to get topics list with formatted colors
def get_topic_options():
    return [
        {"label": "📱 Technology", "value": "technology"},
        {"label": "🔬 Science", "value": "science"},
        {"label": "🏛️ Politics", "value": "politics"},
        {"label": "💼 Business", "value": "business"},
        {"label": "🏥 Health", "value": "health"},
        {"label": "🎭 Entertainment", "value": "entertainment"},
        {"label": "🏆 Sports", "value": "sports"},
        {"label": "📊 General", "value": "general"},
        {"label": "🪖 War", "value":"war"},
        {"label": "📚 Education", "value":"education"},
        {"label":"🌳 Environment", "value":"environment"}
    ]

# Sidebar for configuration
def display_sidebar():
    st.sidebar.markdown("## ⚙️ Configuration")
    
    # Topic selection
    st.sidebar.markdown("### News Topics")
    
    topic_options = get_topic_options()
    default_topics = ["technology"]
    
    selected_topics = []
    for topic_option in topic_options:
        if st.sidebar.checkbox(
            topic_option["label"], 
            value=topic_option["value"] in default_topics,
            key=f"topic_{topic_option['value']}"
        ):
            selected_topics.append(topic_option["value"])
    
    if selected_topics:
        st.session_state.chronicler.config.topics_of_interest = selected_topics
    
    # Number of articles
    st.sidebar.markdown("### Article Settings")
    
    max_fetch = st.sidebar.slider(
        "Max Articles to Research",
        min_value=1,
        max_value=20,
        value=st.session_state.chronicler.config.max_articles_to_fetch,
        step=1
    )
    st.session_state.chronicler.config.max_articles_to_fetch = max_fetch
    
    max_generate = st.sidebar.slider(
        "Max Articles to Generate",
        min_value=1,
        max_value=10,
        value=st.session_state.chronicler.config.max_articles_to_generate,
        step=1
    )
    st.session_state.chronicler.config.max_articles_to_generate = max_generate
    
    # Writing style
    writing_style = st.sidebar.selectbox(
        "Writing Style",
        options=["literary", "journalistic", "academic"],
        index=0
    )
    st.session_state.chronicler.config.writing_style = writing_style
    
    # Article length
    article_length = st.sidebar.selectbox(
        "Article Length",
        options=["short", "medium", "long"],
        index=0
    )
    st.session_state.chronicler.config.article_length = article_length
    
    # Advanced settings
    with st.sidebar.expander("🔍 Advanced Settings"):
        # Include quotes and analysis
        include_quotes = st.checkbox(
            "Include quotes from sources", 
            value=st.session_state.chronicler.config.include_quotes
        )
        st.session_state.chronicler.config.include_quotes = include_quotes
        
        include_analysis = st.checkbox(
            "Include AI analysis", 
            value=st.session_state.chronicler.config.include_analysis
        )
        st.session_state.chronicler.config.include_analysis = include_analysis
        
        # Output format
        output_format = st.selectbox(
            "Output Format",
            options=[ "html","markdown", "text", "json"],
            index=0
        )
        st.session_state.chronicler.config.output_format = output_format
        
        # # API Key settings (if needed)
        # groq_api_key = st.text_input(
        #     "Groq API Key (optional)", 
        #     value=st.session_state.chronicler.config.get_current_groq_token(),
        #     type="password"
        # )
        # if groq_api_key and groq_api_key != st.session_state.chronicler.config.get_current_groq_token():
        #     st.session_state.chronicler.config.groq_api_tokens = [groq_api_key]
    
    # Reset memory button
    if st.sidebar.button("🔄 Reset Memory"):
        st.session_state.chronicler.memory.reset_memory()
        st.sidebar.success("Memory has been reset!")

# Statistics display
def display_stats():
    if hasattr(st.session_state.chronicler, 'articles_generated'):
        stats = st.session_state.chronicler.get_stats()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div class="metric-container">
                <div class="metric-value">{}</div>
                <div class="metric-label">Articles Generated</div>
            </div>
            """.format(stats['articles_generated']), unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="metric-container">
                <div class="metric-value">{}</div>
                <div class="metric-label">Articles Researched</div>
            </div>
            """.format(stats['articles_researched']), unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="metric-container">
                <div class="metric-value">{:.2f}</div>
                <div class="metric-label">Articles Per Hour</div>
            </div>
            """.format(stats['articles_per_hour']), unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="metric-container">
                <div class="metric-value">{:.2f}</div>
                <div class="metric-label">Run Time Hours</div>
            </div>
            """.format(stats['run_time_hours']), unsafe_allow_html=True)



# Main application layout
def main():
    display_app_header()
    
    # Sidebar configuration
    display_sidebar()
    
    # Main content
    tab1, tab2, tab3,tab4 = st.tabs(["📰 Generated News", "✍️ Direct Input","🔍 Similar Articles", "📊 Statistics"])
    
    with tab1:
        st.markdown("### AI News Generator")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            if st.button("🚀 Generate News Articles", use_container_width=True, disabled=st.session_state.generating):
                st.session_state.generating = True
                with st.spinner("Researching trending stories..."):
                    try:
                        # Use the run_cycle method to gather and process news
                        generated_articles = st.session_state.chronicler.run_cycle()
                        
                        if generated_articles:
                            st.session_state.generated_articles = generated_articles + st.session_state.generated_articles
                            st.session_state.last_generated = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        else:
                            st.error("No articles were generated. Please check your configuration and try again.")
                    except Exception as e:
                        st.error(f"Error generating articles: {str(e)}")
                    finally:
                        st.session_state.generating = False
                        st.rerun()
        
        with col2:
            if st.button("🔄 Reset Articles", use_container_width=True):
                st.session_state.generated_articles = []
                st.success("Generated articles have been cleared!")
                st.rerun()
        
        # Display last generated time
        if st.session_state.last_generated:
            st.info(f"Last generated: {st.session_state.last_generated}")
        
        # Display stats
        display_stats()
        
        # Display generated articles
        if st.session_state.generated_articles:
            st.markdown("### Latest Generated Articles")
            
            for i, article in enumerate(st.session_state.generated_articles):
                display_news_card(article, i)
        else:
            st.info("No articles have been generated yet. Click 'Generate News Articles' to get started!")
    
    with tab2:
        display_direct_input_form()
        
        if st.session_state.generated_articles:
            st.markdown("### Your Generated Articles")
            custom_articles = [article for article in st.session_state.generated_articles 
                             if article.get('source_name') == 'Direct Input']
            
            if custom_articles:
                for i, article in enumerate(custom_articles):
                    display_news_card(article, i, source_tab="direct_input")
            else:
                st.info("No custom articles generated yet. Use the form above to create one.")
    


    with tab3:
        st.markdown("### Find Similar Articles")
        
        # Create form for similar articles search
        with st.form("similar_articles_form"):
            article_name = st.text_input(
                "Article Title/Topic",
                placeholder="Enter an article title or topic to find similar content..."
            )
            
            submitted = st.form_submit_button("🔎 Find Similar Articles", use_container_width=True)
            if submitted and article_name:
                with st.spinner("Searching for similar articles..."):
                    try:
                        # Get similar articles using the chronicler
                        similar_articles = st.session_state.chronicler.generate_similar_articles(article_name)
                        
                        if similar_articles:
                            # Add to the beginning of generated articles with a special tag
                            for article in similar_articles:
                                article['source_name'] = 'Similar Articles Search'
                                article['search_query'] = article_name
                            
                            st.session_state.generated_articles = similar_articles + st.session_state.generated_articles
                            st.success(f"✨ Found {len(similar_articles)} similar articles!")
                            st.rerun()
                        else:
                            st.error("No similar articles found. Try a different topic or title.")
                    except Exception as e:
                        st.error(f"Error finding similar articles: {str(e)}")
        # Display similar articles
        if st.session_state.generated_articles:
            st.markdown("### Similar Articles Found")
            similar_articles = [
                article for article in st.session_state.generated_articles 
                if article.get('source_name') == 'Similar Articles Search'
            ]
            
            if similar_articles:
                for i, article in enumerate(similar_articles):
                    # Add search query info
                    search_query = article.get('search_query', '')
                    st.markdown(f"*Search query: '{search_query}'*")
                    
                    # Display article with download options
                    display_news_card(article, i, source_tab="similar")
                    
                    # Add text download option
                    download_text = f"""
=================================================================
{article.get('generated_title', 'Untitled Article').upper()}
=================================================================

Search Query: {search_query}
Topic: {article.get('topic', 'general').capitalize()}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

-----------------------------------------------------------------

{article.get('generated_content', '')}

-----------------------------------------------------------------

Generated by Digital Chronicler
Similar Articles Search Results
=================================================================
"""                    
                    # Add specific text download button
                    st.download_button(
                        label="📄 Download as Text",
                        data=download_text,
                        file_name=f"similar_article_{i}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                        mime="text/plain",
                        key=f"text_download_similar_{i}"
                    )
                    st.markdown("---")
            else:
                st.info("No similar articles have been generated yet. Use the search form above to find articles!")
    



    with tab4:
        st.markdown("### System Statistics")
        
        # Display more detailed statistics
        if hasattr(st.session_state.chronicler, 'get_stats'):
            stats = st.session_state.chronicler.get_stats()
            
            st.markdown("#### Memory Statistics")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Story Hashes", stats.get('memory_stories', 0))
            
            with col2:
                st.metric("Processed URLs", stats.get('memory_urls', 0))
            
            with col3:
                st.metric("Generated Titles", stats.get('memory_titles', 0))
            
            # Topic trends
            st.markdown("#### Topic Trends")
            
            topic_trends = stats.get('topic_trends', {})
            if topic_trends:
                # Convert to DataFrame for display
                df = pd.DataFrame(list(topic_trends.items()), columns=['Topic', 'Count'])
                df = df.sort_values(by='Count', ascending=False)
                
                st.bar_chart(df.set_index('Topic'))
                
                st.markdown("#### Topic Distribution")
                st.dataframe(df, use_container_width=True)
            else:
                st.info("No topic trends data available yet.")
        else:
            st.info("Statistics will appear after generating articles.")

    # Footer
    st.markdown("---")
    st.markdown("#### About Digital Chronicler")
    st.markdown("""
    Digital Chronicler is an AI-powered news generation platform that researches trending stories 
    and creates original content. It uses advanced natural language processing to craft 
    compelling narratives in various writing styles.
    """)

if __name__ == "__main__":
    main()
